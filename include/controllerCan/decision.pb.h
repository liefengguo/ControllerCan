// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#ifndef PROTOBUF_decision_2eproto__INCLUDED
#define PROTOBUF_decision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_decision_2eproto();
void protobuf_AssignDesc_decision_2eproto();
void protobuf_ShutdownFile_decision_2eproto();

class Decision;

// ===================================================================

class Decision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Decision) */ {
 public:
  Decision();
  virtual ~Decision();

  Decision(const Decision& from);

  inline Decision& operator=(const Decision& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Decision& default_instance();

  void Swap(Decision* other);

  // implements Message ----------------------------------------------

  inline Decision* New() const { return New(NULL); }

  Decision* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Decision& from);
  void MergeFrom(const Decision& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Decision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Brk_Active = 1;
  bool has_brk_active() const;
  void clear_brk_active();
  static const int kBrkActiveFieldNumber = 1;
  ::google::protobuf::int32 brk_active() const;
  void set_brk_active(::google::protobuf::int32 value);

  // optional int32 Brk_CtrlMode = 2;
  bool has_brk_ctrlmode() const;
  void clear_brk_ctrlmode();
  static const int kBrkCtrlModeFieldNumber = 2;
  ::google::protobuf::int32 brk_ctrlmode() const;
  void set_brk_ctrlmode(::google::protobuf::int32 value);

  // optional double Brk_TgtPedpos = 3;
  bool has_brk_tgtpedpos() const;
  void clear_brk_tgtpedpos();
  static const int kBrkTgtPedposFieldNumber = 3;
  double brk_tgtpedpos() const;
  void set_brk_tgtpedpos(double value);

  // optional double Brk_TgtPress = 4;
  bool has_brk_tgtpress() const;
  void clear_brk_tgtpress();
  static const int kBrkTgtPressFieldNumber = 4;
  double brk_tgtpress() const;
  void set_brk_tgtpress(double value);

  // optional double Brk_TgtAccSpd = 5;
  bool has_brk_tgtaccspd() const;
  void clear_brk_tgtaccspd();
  static const int kBrkTgtAccSpdFieldNumber = 5;
  double brk_tgtaccspd() const;
  void set_brk_tgtaccspd(double value);

  // optional int32 Prk_Active = 6;
  bool has_prk_active() const;
  void clear_prk_active();
  static const int kPrkActiveFieldNumber = 6;
  ::google::protobuf::int32 prk_active() const;
  void set_prk_active(::google::protobuf::int32 value);

  // optional bool Prk_Enable = 7;
  bool has_prk_enable() const;
  void clear_prk_enable();
  static const int kPrkEnableFieldNumber = 7;
  bool prk_enable() const;
  void set_prk_enable(bool value);

  // optional int32 Str_Active = 8;
  bool has_str_active() const;
  void clear_str_active();
  static const int kStrActiveFieldNumber = 8;
  ::google::protobuf::int32 str_active() const;
  void set_str_active(::google::protobuf::int32 value);

  // optional int32 Str_CtrlMode = 9;
  bool has_str_ctrlmode() const;
  void clear_str_ctrlmode();
  static const int kStrCtrlModeFieldNumber = 9;
  ::google::protobuf::int32 str_ctrlmode() const;
  void set_str_ctrlmode(::google::protobuf::int32 value);

  // optional double Str_TgtAngle = 10;
  bool has_str_tgtangle() const;
  void clear_str_tgtangle();
  static const int kStrTgtAngleFieldNumber = 10;
  double str_tgtangle() const;
  void set_str_tgtangle(double value);

  // optional double Str_TgtCurvature = 11;
  bool has_str_tgtcurvature() const;
  void clear_str_tgtcurvature();
  static const int kStrTgtCurvatureFieldNumber = 11;
  double str_tgtcurvature() const;
  void set_str_tgtcurvature(double value);

  // optional double Str_TgtAngleSpd = 12;
  bool has_str_tgtanglespd() const;
  void clear_str_tgtanglespd();
  static const int kStrTgtAngleSpdFieldNumber = 12;
  double str_tgtanglespd() const;
  void set_str_tgtanglespd(double value);

  // optional int32 Drv_Active = 13;
  bool has_drv_active() const;
  void clear_drv_active();
  static const int kDrvActiveFieldNumber = 13;
  ::google::protobuf::int32 drv_active() const;
  void set_drv_active(::google::protobuf::int32 value);

  // optional int32 Drv_CtrlMode = 14;
  bool has_drv_ctrlmode() const;
  void clear_drv_ctrlmode();
  static const int kDrvCtrlModeFieldNumber = 14;
  ::google::protobuf::int32 drv_ctrlmode() const;
  void set_drv_ctrlmode(::google::protobuf::int32 value);

  // optional int32 Drv_TgtGear = 15;
  bool has_drv_tgtgear() const;
  void clear_drv_tgtgear();
  static const int kDrvTgtGearFieldNumber = 15;
  ::google::protobuf::int32 drv_tgtgear() const;
  void set_drv_tgtgear(::google::protobuf::int32 value);

  // optional double Drv_TgtPedpos = 16;
  bool has_drv_tgtpedpos() const;
  void clear_drv_tgtpedpos();
  static const int kDrvTgtPedposFieldNumber = 16;
  double drv_tgtpedpos() const;
  void set_drv_tgtpedpos(double value);

  // optional double Drv_TgtVehSpd0 = 17;
  bool has_drv_tgtvehspd0() const;
  void clear_drv_tgtvehspd0();
  static const int kDrvTgtVehSpd0FieldNumber = 17;
  double drv_tgtvehspd0() const;
  void set_drv_tgtvehspd0(double value);

  // optional double Drv_TgtVehAccSpd = 18;
  bool has_drv_tgtvehaccspd() const;
  void clear_drv_tgtvehaccspd();
  static const int kDrvTgtVehAccSpdFieldNumber = 18;
  double drv_tgtvehaccspd() const;
  void set_drv_tgtvehaccspd(double value);

  // optional double Drv_VehSpdLimit = 19;
  bool has_drv_vehspdlimit() const;
  void clear_drv_vehspdlimit();
  static const int kDrvVehSpdLimitFieldNumber = 19;
  double drv_vehspdlimit() const;
  void set_drv_vehspdlimit(double value);

  // @@protoc_insertion_point(class_scope:Decision)
 private:
  inline void set_has_brk_active();
  inline void clear_has_brk_active();
  inline void set_has_brk_ctrlmode();
  inline void clear_has_brk_ctrlmode();
  inline void set_has_brk_tgtpedpos();
  inline void clear_has_brk_tgtpedpos();
  inline void set_has_brk_tgtpress();
  inline void clear_has_brk_tgtpress();
  inline void set_has_brk_tgtaccspd();
  inline void clear_has_brk_tgtaccspd();
  inline void set_has_prk_active();
  inline void clear_has_prk_active();
  inline void set_has_prk_enable();
  inline void clear_has_prk_enable();
  inline void set_has_str_active();
  inline void clear_has_str_active();
  inline void set_has_str_ctrlmode();
  inline void clear_has_str_ctrlmode();
  inline void set_has_str_tgtangle();
  inline void clear_has_str_tgtangle();
  inline void set_has_str_tgtcurvature();
  inline void clear_has_str_tgtcurvature();
  inline void set_has_str_tgtanglespd();
  inline void clear_has_str_tgtanglespd();
  inline void set_has_drv_active();
  inline void clear_has_drv_active();
  inline void set_has_drv_ctrlmode();
  inline void clear_has_drv_ctrlmode();
  inline void set_has_drv_tgtgear();
  inline void clear_has_drv_tgtgear();
  inline void set_has_drv_tgtpedpos();
  inline void clear_has_drv_tgtpedpos();
  inline void set_has_drv_tgtvehspd0();
  inline void clear_has_drv_tgtvehspd0();
  inline void set_has_drv_tgtvehaccspd();
  inline void clear_has_drv_tgtvehaccspd();
  inline void set_has_drv_vehspdlimit();
  inline void clear_has_drv_vehspdlimit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 brk_active_;
  ::google::protobuf::int32 brk_ctrlmode_;
  double brk_tgtpedpos_;
  double brk_tgtpress_;
  double brk_tgtaccspd_;
  ::google::protobuf::int32 prk_active_;
  bool prk_enable_;
  ::google::protobuf::int32 str_active_;
  ::google::protobuf::int32 str_ctrlmode_;
  double str_tgtangle_;
  double str_tgtcurvature_;
  double str_tgtanglespd_;
  ::google::protobuf::int32 drv_active_;
  ::google::protobuf::int32 drv_ctrlmode_;
  double drv_tgtpedpos_;
  double drv_tgtvehspd0_;
  double drv_tgtvehaccspd_;
  double drv_vehspdlimit_;
  ::google::protobuf::int32 drv_tgtgear_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static Decision* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Decision

// optional int32 Brk_Active = 1;
inline bool Decision::has_brk_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Decision::set_has_brk_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Decision::clear_has_brk_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Decision::clear_brk_active() {
  brk_active_ = 0;
  clear_has_brk_active();
}
inline ::google::protobuf::int32 Decision::brk_active() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_Active)
  return brk_active_;
}
inline void Decision::set_brk_active(::google::protobuf::int32 value) {
  set_has_brk_active();
  brk_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_Active)
}

// optional int32 Brk_CtrlMode = 2;
inline bool Decision::has_brk_ctrlmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Decision::set_has_brk_ctrlmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Decision::clear_has_brk_ctrlmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Decision::clear_brk_ctrlmode() {
  brk_ctrlmode_ = 0;
  clear_has_brk_ctrlmode();
}
inline ::google::protobuf::int32 Decision::brk_ctrlmode() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_CtrlMode)
  return brk_ctrlmode_;
}
inline void Decision::set_brk_ctrlmode(::google::protobuf::int32 value) {
  set_has_brk_ctrlmode();
  brk_ctrlmode_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_CtrlMode)
}

// optional double Brk_TgtPedpos = 3;
inline bool Decision::has_brk_tgtpedpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Decision::set_has_brk_tgtpedpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Decision::clear_has_brk_tgtpedpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Decision::clear_brk_tgtpedpos() {
  brk_tgtpedpos_ = 0;
  clear_has_brk_tgtpedpos();
}
inline double Decision::brk_tgtpedpos() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_TgtPedpos)
  return brk_tgtpedpos_;
}
inline void Decision::set_brk_tgtpedpos(double value) {
  set_has_brk_tgtpedpos();
  brk_tgtpedpos_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_TgtPedpos)
}

// optional double Brk_TgtPress = 4;
inline bool Decision::has_brk_tgtpress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Decision::set_has_brk_tgtpress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Decision::clear_has_brk_tgtpress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Decision::clear_brk_tgtpress() {
  brk_tgtpress_ = 0;
  clear_has_brk_tgtpress();
}
inline double Decision::brk_tgtpress() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_TgtPress)
  return brk_tgtpress_;
}
inline void Decision::set_brk_tgtpress(double value) {
  set_has_brk_tgtpress();
  brk_tgtpress_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_TgtPress)
}

// optional double Brk_TgtAccSpd = 5;
inline bool Decision::has_brk_tgtaccspd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Decision::set_has_brk_tgtaccspd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Decision::clear_has_brk_tgtaccspd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Decision::clear_brk_tgtaccspd() {
  brk_tgtaccspd_ = 0;
  clear_has_brk_tgtaccspd();
}
inline double Decision::brk_tgtaccspd() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_TgtAccSpd)
  return brk_tgtaccspd_;
}
inline void Decision::set_brk_tgtaccspd(double value) {
  set_has_brk_tgtaccspd();
  brk_tgtaccspd_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_TgtAccSpd)
}

// optional int32 Prk_Active = 6;
inline bool Decision::has_prk_active() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Decision::set_has_prk_active() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Decision::clear_has_prk_active() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Decision::clear_prk_active() {
  prk_active_ = 0;
  clear_has_prk_active();
}
inline ::google::protobuf::int32 Decision::prk_active() const {
  // @@protoc_insertion_point(field_get:Decision.Prk_Active)
  return prk_active_;
}
inline void Decision::set_prk_active(::google::protobuf::int32 value) {
  set_has_prk_active();
  prk_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Prk_Active)
}

// optional bool Prk_Enable = 7;
inline bool Decision::has_prk_enable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Decision::set_has_prk_enable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Decision::clear_has_prk_enable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Decision::clear_prk_enable() {
  prk_enable_ = false;
  clear_has_prk_enable();
}
inline bool Decision::prk_enable() const {
  // @@protoc_insertion_point(field_get:Decision.Prk_Enable)
  return prk_enable_;
}
inline void Decision::set_prk_enable(bool value) {
  set_has_prk_enable();
  prk_enable_ = value;
  // @@protoc_insertion_point(field_set:Decision.Prk_Enable)
}

// optional int32 Str_Active = 8;
inline bool Decision::has_str_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Decision::set_has_str_active() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Decision::clear_has_str_active() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Decision::clear_str_active() {
  str_active_ = 0;
  clear_has_str_active();
}
inline ::google::protobuf::int32 Decision::str_active() const {
  // @@protoc_insertion_point(field_get:Decision.Str_Active)
  return str_active_;
}
inline void Decision::set_str_active(::google::protobuf::int32 value) {
  set_has_str_active();
  str_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_Active)
}

// optional int32 Str_CtrlMode = 9;
inline bool Decision::has_str_ctrlmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Decision::set_has_str_ctrlmode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Decision::clear_has_str_ctrlmode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Decision::clear_str_ctrlmode() {
  str_ctrlmode_ = 0;
  clear_has_str_ctrlmode();
}
inline ::google::protobuf::int32 Decision::str_ctrlmode() const {
  // @@protoc_insertion_point(field_get:Decision.Str_CtrlMode)
  return str_ctrlmode_;
}
inline void Decision::set_str_ctrlmode(::google::protobuf::int32 value) {
  set_has_str_ctrlmode();
  str_ctrlmode_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_CtrlMode)
}

// optional double Str_TgtAngle = 10;
inline bool Decision::has_str_tgtangle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Decision::set_has_str_tgtangle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Decision::clear_has_str_tgtangle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Decision::clear_str_tgtangle() {
  str_tgtangle_ = 0;
  clear_has_str_tgtangle();
}
inline double Decision::str_tgtangle() const {
  // @@protoc_insertion_point(field_get:Decision.Str_TgtAngle)
  return str_tgtangle_;
}
inline void Decision::set_str_tgtangle(double value) {
  set_has_str_tgtangle();
  str_tgtangle_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_TgtAngle)
}

// optional double Str_TgtCurvature = 11;
inline bool Decision::has_str_tgtcurvature() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Decision::set_has_str_tgtcurvature() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Decision::clear_has_str_tgtcurvature() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Decision::clear_str_tgtcurvature() {
  str_tgtcurvature_ = 0;
  clear_has_str_tgtcurvature();
}
inline double Decision::str_tgtcurvature() const {
  // @@protoc_insertion_point(field_get:Decision.Str_TgtCurvature)
  return str_tgtcurvature_;
}
inline void Decision::set_str_tgtcurvature(double value) {
  set_has_str_tgtcurvature();
  str_tgtcurvature_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_TgtCurvature)
}

// optional double Str_TgtAngleSpd = 12;
inline bool Decision::has_str_tgtanglespd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Decision::set_has_str_tgtanglespd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Decision::clear_has_str_tgtanglespd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Decision::clear_str_tgtanglespd() {
  str_tgtanglespd_ = 0;
  clear_has_str_tgtanglespd();
}
inline double Decision::str_tgtanglespd() const {
  // @@protoc_insertion_point(field_get:Decision.Str_TgtAngleSpd)
  return str_tgtanglespd_;
}
inline void Decision::set_str_tgtanglespd(double value) {
  set_has_str_tgtanglespd();
  str_tgtanglespd_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_TgtAngleSpd)
}

// optional int32 Drv_Active = 13;
inline bool Decision::has_drv_active() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Decision::set_has_drv_active() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Decision::clear_has_drv_active() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Decision::clear_drv_active() {
  drv_active_ = 0;
  clear_has_drv_active();
}
inline ::google::protobuf::int32 Decision::drv_active() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_Active)
  return drv_active_;
}
inline void Decision::set_drv_active(::google::protobuf::int32 value) {
  set_has_drv_active();
  drv_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_Active)
}

// optional int32 Drv_CtrlMode = 14;
inline bool Decision::has_drv_ctrlmode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Decision::set_has_drv_ctrlmode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Decision::clear_has_drv_ctrlmode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Decision::clear_drv_ctrlmode() {
  drv_ctrlmode_ = 0;
  clear_has_drv_ctrlmode();
}
inline ::google::protobuf::int32 Decision::drv_ctrlmode() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_CtrlMode)
  return drv_ctrlmode_;
}
inline void Decision::set_drv_ctrlmode(::google::protobuf::int32 value) {
  set_has_drv_ctrlmode();
  drv_ctrlmode_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_CtrlMode)
}

// optional int32 Drv_TgtGear = 15;
inline bool Decision::has_drv_tgtgear() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Decision::set_has_drv_tgtgear() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Decision::clear_has_drv_tgtgear() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Decision::clear_drv_tgtgear() {
  drv_tgtgear_ = 0;
  clear_has_drv_tgtgear();
}
inline ::google::protobuf::int32 Decision::drv_tgtgear() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtGear)
  return drv_tgtgear_;
}
inline void Decision::set_drv_tgtgear(::google::protobuf::int32 value) {
  set_has_drv_tgtgear();
  drv_tgtgear_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtGear)
}

// optional double Drv_TgtPedpos = 16;
inline bool Decision::has_drv_tgtpedpos() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Decision::set_has_drv_tgtpedpos() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Decision::clear_has_drv_tgtpedpos() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Decision::clear_drv_tgtpedpos() {
  drv_tgtpedpos_ = 0;
  clear_has_drv_tgtpedpos();
}
inline double Decision::drv_tgtpedpos() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtPedpos)
  return drv_tgtpedpos_;
}
inline void Decision::set_drv_tgtpedpos(double value) {
  set_has_drv_tgtpedpos();
  drv_tgtpedpos_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtPedpos)
}

// optional double Drv_TgtVehSpd0 = 17;
inline bool Decision::has_drv_tgtvehspd0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Decision::set_has_drv_tgtvehspd0() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Decision::clear_has_drv_tgtvehspd0() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Decision::clear_drv_tgtvehspd0() {
  drv_tgtvehspd0_ = 0;
  clear_has_drv_tgtvehspd0();
}
inline double Decision::drv_tgtvehspd0() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtVehSpd0)
  return drv_tgtvehspd0_;
}
inline void Decision::set_drv_tgtvehspd0(double value) {
  set_has_drv_tgtvehspd0();
  drv_tgtvehspd0_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtVehSpd0)
}

// optional double Drv_TgtVehAccSpd = 18;
inline bool Decision::has_drv_tgtvehaccspd() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Decision::set_has_drv_tgtvehaccspd() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Decision::clear_has_drv_tgtvehaccspd() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Decision::clear_drv_tgtvehaccspd() {
  drv_tgtvehaccspd_ = 0;
  clear_has_drv_tgtvehaccspd();
}
inline double Decision::drv_tgtvehaccspd() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtVehAccSpd)
  return drv_tgtvehaccspd_;
}
inline void Decision::set_drv_tgtvehaccspd(double value) {
  set_has_drv_tgtvehaccspd();
  drv_tgtvehaccspd_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtVehAccSpd)
}

// optional double Drv_VehSpdLimit = 19;
inline bool Decision::has_drv_vehspdlimit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Decision::set_has_drv_vehspdlimit() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Decision::clear_has_drv_vehspdlimit() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Decision::clear_drv_vehspdlimit() {
  drv_vehspdlimit_ = 0;
  clear_has_drv_vehspdlimit();
}
inline double Decision::drv_vehspdlimit() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_VehSpdLimit)
  return drv_vehspdlimit_;
}
inline void Decision::set_drv_vehspdlimit(double value) {
  set_has_drv_vehspdlimit();
  drv_vehspdlimit_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_VehSpdLimit)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_decision_2eproto__INCLUDED
