// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Decision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Decision_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_decision_2eproto() {
  protobuf_AddDesc_decision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decision.proto");
  GOOGLE_CHECK(file != NULL);
  Decision_descriptor_ = file->message_type(0);
  static const int Decision_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, brk_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, brk_ctrlmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, brk_tgtpedpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, brk_tgtpress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, brk_tgtaccspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, prk_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, prk_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, str_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, str_ctrlmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, str_tgtangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, str_tgtcurvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, str_tgtanglespd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_ctrlmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_tgtgear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_tgtpedpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_tgtvehspd0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_tgtvehaccspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, drv_vehspdlimit_),
  };
  Decision_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Decision_descriptor_,
      Decision::default_instance_,
      Decision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, _has_bits_[0]),
      -1,
      -1,
      sizeof(Decision),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decision, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Decision_descriptor_, &Decision::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decision_2eproto() {
  delete Decision::default_instance_;
  delete Decision_reflection_;
}

void protobuf_AddDesc_decision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_decision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016decision.proto\"\264\003\n\010Decision\022\022\n\nBrk_Act"
    "ive\030\001 \001(\005\022\024\n\014Brk_CtrlMode\030\002 \001(\005\022\025\n\rBrk_T"
    "gtPedpos\030\003 \001(\001\022\024\n\014Brk_TgtPress\030\004 \001(\001\022\025\n\r"
    "Brk_TgtAccSpd\030\005 \001(\001\022\022\n\nPrk_Active\030\006 \001(\005\022"
    "\022\n\nPrk_Enable\030\007 \001(\010\022\022\n\nStr_Active\030\010 \001(\005\022"
    "\024\n\014Str_CtrlMode\030\t \001(\005\022\024\n\014Str_TgtAngle\030\n "
    "\001(\001\022\030\n\020Str_TgtCurvature\030\013 \001(\001\022\027\n\017Str_Tgt"
    "AngleSpd\030\014 \001(\001\022\022\n\nDrv_Active\030\r \001(\005\022\024\n\014Dr"
    "v_CtrlMode\030\016 \001(\005\022\023\n\013Drv_TgtGear\030\017 \001(\005\022\025\n"
    "\rDrv_TgtPedpos\030\020 \001(\001\022\026\n\016Drv_TgtVehSpd0\030\021"
    " \001(\001\022\030\n\020Drv_TgtVehAccSpd\030\022 \001(\001\022\027\n\017Drv_Ve"
    "hSpdLimit\030\023 \001(\001", 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
  Decision::default_instance_ = new Decision();
  Decision::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decision_2eproto {
  StaticDescriptorInitializer_decision_2eproto() {
    protobuf_AddDesc_decision_2eproto();
  }
} static_descriptor_initializer_decision_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Decision::kBrkActiveFieldNumber;
const int Decision::kBrkCtrlModeFieldNumber;
const int Decision::kBrkTgtPedposFieldNumber;
const int Decision::kBrkTgtPressFieldNumber;
const int Decision::kBrkTgtAccSpdFieldNumber;
const int Decision::kPrkActiveFieldNumber;
const int Decision::kPrkEnableFieldNumber;
const int Decision::kStrActiveFieldNumber;
const int Decision::kStrCtrlModeFieldNumber;
const int Decision::kStrTgtAngleFieldNumber;
const int Decision::kStrTgtCurvatureFieldNumber;
const int Decision::kStrTgtAngleSpdFieldNumber;
const int Decision::kDrvActiveFieldNumber;
const int Decision::kDrvCtrlModeFieldNumber;
const int Decision::kDrvTgtGearFieldNumber;
const int Decision::kDrvTgtPedposFieldNumber;
const int Decision::kDrvTgtVehSpd0FieldNumber;
const int Decision::kDrvTgtVehAccSpdFieldNumber;
const int Decision::kDrvVehSpdLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Decision::Decision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Decision)
}

void Decision::InitAsDefaultInstance() {
}

Decision::Decision(const Decision& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Decision)
}

void Decision::SharedCtor() {
  _cached_size_ = 0;
  brk_active_ = 0;
  brk_ctrlmode_ = 0;
  brk_tgtpedpos_ = 0;
  brk_tgtpress_ = 0;
  brk_tgtaccspd_ = 0;
  prk_active_ = 0;
  prk_enable_ = false;
  str_active_ = 0;
  str_ctrlmode_ = 0;
  str_tgtangle_ = 0;
  str_tgtcurvature_ = 0;
  str_tgtanglespd_ = 0;
  drv_active_ = 0;
  drv_ctrlmode_ = 0;
  drv_tgtgear_ = 0;
  drv_tgtpedpos_ = 0;
  drv_tgtvehspd0_ = 0;
  drv_tgtvehaccspd_ = 0;
  drv_vehspdlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Decision::~Decision() {
  // @@protoc_insertion_point(destructor:Decision)
  SharedDtor();
}

void Decision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Decision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decision_descriptor_;
}

const Decision& Decision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Decision* Decision::default_instance_ = NULL;

Decision* Decision::New(::google::protobuf::Arena* arena) const {
  Decision* n = new Decision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Decision::Clear() {
// @@protoc_insertion_point(message_clear_start:Decision)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Decision, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Decision*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(brk_active_, str_active_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(str_ctrlmode_, drv_tgtpedpos_);
    drv_tgtgear_ = 0;
  }
  ZR_(drv_tgtvehspd0_, drv_vehspdlimit_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Decision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Decision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Brk_Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brk_active_)));
          set_has_brk_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Brk_CtrlMode;
        break;
      }

      // optional int32 Brk_CtrlMode = 2;
      case 2: {
        if (tag == 16) {
         parse_Brk_CtrlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brk_ctrlmode_)));
          set_has_brk_ctrlmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Brk_TgtPedpos;
        break;
      }

      // optional double Brk_TgtPedpos = 3;
      case 3: {
        if (tag == 25) {
         parse_Brk_TgtPedpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brk_tgtpedpos_)));
          set_has_brk_tgtpedpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Brk_TgtPress;
        break;
      }

      // optional double Brk_TgtPress = 4;
      case 4: {
        if (tag == 33) {
         parse_Brk_TgtPress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brk_tgtpress_)));
          set_has_brk_tgtpress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Brk_TgtAccSpd;
        break;
      }

      // optional double Brk_TgtAccSpd = 5;
      case 5: {
        if (tag == 41) {
         parse_Brk_TgtAccSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brk_tgtaccspd_)));
          set_has_brk_tgtaccspd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Prk_Active;
        break;
      }

      // optional int32 Prk_Active = 6;
      case 6: {
        if (tag == 48) {
         parse_Prk_Active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prk_active_)));
          set_has_prk_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Prk_Enable;
        break;
      }

      // optional bool Prk_Enable = 7;
      case 7: {
        if (tag == 56) {
         parse_Prk_Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prk_enable_)));
          set_has_prk_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Str_Active;
        break;
      }

      // optional int32 Str_Active = 8;
      case 8: {
        if (tag == 64) {
         parse_Str_Active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_active_)));
          set_has_str_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Str_CtrlMode;
        break;
      }

      // optional int32 Str_CtrlMode = 9;
      case 9: {
        if (tag == 72) {
         parse_Str_CtrlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_ctrlmode_)));
          set_has_str_ctrlmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_Str_TgtAngle;
        break;
      }

      // optional double Str_TgtAngle = 10;
      case 10: {
        if (tag == 81) {
         parse_Str_TgtAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &str_tgtangle_)));
          set_has_str_tgtangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_Str_TgtCurvature;
        break;
      }

      // optional double Str_TgtCurvature = 11;
      case 11: {
        if (tag == 89) {
         parse_Str_TgtCurvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &str_tgtcurvature_)));
          set_has_str_tgtcurvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Str_TgtAngleSpd;
        break;
      }

      // optional double Str_TgtAngleSpd = 12;
      case 12: {
        if (tag == 97) {
         parse_Str_TgtAngleSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &str_tgtanglespd_)));
          set_has_str_tgtanglespd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Drv_Active;
        break;
      }

      // optional int32 Drv_Active = 13;
      case 13: {
        if (tag == 104) {
         parse_Drv_Active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drv_active_)));
          set_has_drv_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Drv_CtrlMode;
        break;
      }

      // optional int32 Drv_CtrlMode = 14;
      case 14: {
        if (tag == 112) {
         parse_Drv_CtrlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drv_ctrlmode_)));
          set_has_drv_ctrlmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Drv_TgtGear;
        break;
      }

      // optional int32 Drv_TgtGear = 15;
      case 15: {
        if (tag == 120) {
         parse_Drv_TgtGear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drv_tgtgear_)));
          set_has_drv_tgtgear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_Drv_TgtPedpos;
        break;
      }

      // optional double Drv_TgtPedpos = 16;
      case 16: {
        if (tag == 129) {
         parse_Drv_TgtPedpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drv_tgtpedpos_)));
          set_has_drv_tgtpedpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_Drv_TgtVehSpd0;
        break;
      }

      // optional double Drv_TgtVehSpd0 = 17;
      case 17: {
        if (tag == 137) {
         parse_Drv_TgtVehSpd0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drv_tgtvehspd0_)));
          set_has_drv_tgtvehspd0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_Drv_TgtVehAccSpd;
        break;
      }

      // optional double Drv_TgtVehAccSpd = 18;
      case 18: {
        if (tag == 145) {
         parse_Drv_TgtVehAccSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drv_tgtvehaccspd_)));
          set_has_drv_tgtvehaccspd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_Drv_VehSpdLimit;
        break;
      }

      // optional double Drv_VehSpdLimit = 19;
      case 19: {
        if (tag == 153) {
         parse_Drv_VehSpdLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drv_vehspdlimit_)));
          set_has_drv_vehspdlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Decision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Decision)
  return false;
#undef DO_
}

void Decision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Decision)
  // optional int32 Brk_Active = 1;
  if (has_brk_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brk_active(), output);
  }

  // optional int32 Brk_CtrlMode = 2;
  if (has_brk_ctrlmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brk_ctrlmode(), output);
  }

  // optional double Brk_TgtPedpos = 3;
  if (has_brk_tgtpedpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->brk_tgtpedpos(), output);
  }

  // optional double Brk_TgtPress = 4;
  if (has_brk_tgtpress()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->brk_tgtpress(), output);
  }

  // optional double Brk_TgtAccSpd = 5;
  if (has_brk_tgtaccspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->brk_tgtaccspd(), output);
  }

  // optional int32 Prk_Active = 6;
  if (has_prk_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prk_active(), output);
  }

  // optional bool Prk_Enable = 7;
  if (has_prk_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->prk_enable(), output);
  }

  // optional int32 Str_Active = 8;
  if (has_str_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->str_active(), output);
  }

  // optional int32 Str_CtrlMode = 9;
  if (has_str_ctrlmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->str_ctrlmode(), output);
  }

  // optional double Str_TgtAngle = 10;
  if (has_str_tgtangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->str_tgtangle(), output);
  }

  // optional double Str_TgtCurvature = 11;
  if (has_str_tgtcurvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->str_tgtcurvature(), output);
  }

  // optional double Str_TgtAngleSpd = 12;
  if (has_str_tgtanglespd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->str_tgtanglespd(), output);
  }

  // optional int32 Drv_Active = 13;
  if (has_drv_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->drv_active(), output);
  }

  // optional int32 Drv_CtrlMode = 14;
  if (has_drv_ctrlmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->drv_ctrlmode(), output);
  }

  // optional int32 Drv_TgtGear = 15;
  if (has_drv_tgtgear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->drv_tgtgear(), output);
  }

  // optional double Drv_TgtPedpos = 16;
  if (has_drv_tgtpedpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->drv_tgtpedpos(), output);
  }

  // optional double Drv_TgtVehSpd0 = 17;
  if (has_drv_tgtvehspd0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->drv_tgtvehspd0(), output);
  }

  // optional double Drv_TgtVehAccSpd = 18;
  if (has_drv_tgtvehaccspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->drv_tgtvehaccspd(), output);
  }

  // optional double Drv_VehSpdLimit = 19;
  if (has_drv_vehspdlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->drv_vehspdlimit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Decision)
}

::google::protobuf::uint8* Decision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Decision)
  // optional int32 Brk_Active = 1;
  if (has_brk_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brk_active(), target);
  }

  // optional int32 Brk_CtrlMode = 2;
  if (has_brk_ctrlmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brk_ctrlmode(), target);
  }

  // optional double Brk_TgtPedpos = 3;
  if (has_brk_tgtpedpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->brk_tgtpedpos(), target);
  }

  // optional double Brk_TgtPress = 4;
  if (has_brk_tgtpress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->brk_tgtpress(), target);
  }

  // optional double Brk_TgtAccSpd = 5;
  if (has_brk_tgtaccspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->brk_tgtaccspd(), target);
  }

  // optional int32 Prk_Active = 6;
  if (has_prk_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prk_active(), target);
  }

  // optional bool Prk_Enable = 7;
  if (has_prk_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->prk_enable(), target);
  }

  // optional int32 Str_Active = 8;
  if (has_str_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->str_active(), target);
  }

  // optional int32 Str_CtrlMode = 9;
  if (has_str_ctrlmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->str_ctrlmode(), target);
  }

  // optional double Str_TgtAngle = 10;
  if (has_str_tgtangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->str_tgtangle(), target);
  }

  // optional double Str_TgtCurvature = 11;
  if (has_str_tgtcurvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->str_tgtcurvature(), target);
  }

  // optional double Str_TgtAngleSpd = 12;
  if (has_str_tgtanglespd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->str_tgtanglespd(), target);
  }

  // optional int32 Drv_Active = 13;
  if (has_drv_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->drv_active(), target);
  }

  // optional int32 Drv_CtrlMode = 14;
  if (has_drv_ctrlmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->drv_ctrlmode(), target);
  }

  // optional int32 Drv_TgtGear = 15;
  if (has_drv_tgtgear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->drv_tgtgear(), target);
  }

  // optional double Drv_TgtPedpos = 16;
  if (has_drv_tgtpedpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->drv_tgtpedpos(), target);
  }

  // optional double Drv_TgtVehSpd0 = 17;
  if (has_drv_tgtvehspd0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->drv_tgtvehspd0(), target);
  }

  // optional double Drv_TgtVehAccSpd = 18;
  if (has_drv_tgtvehaccspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->drv_tgtvehaccspd(), target);
  }

  // optional double Drv_VehSpdLimit = 19;
  if (has_drv_vehspdlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->drv_vehspdlimit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Decision)
  return target;
}

int Decision::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Decision)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 Brk_Active = 1;
    if (has_brk_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brk_active());
    }

    // optional int32 Brk_CtrlMode = 2;
    if (has_brk_ctrlmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brk_ctrlmode());
    }

    // optional double Brk_TgtPedpos = 3;
    if (has_brk_tgtpedpos()) {
      total_size += 1 + 8;
    }

    // optional double Brk_TgtPress = 4;
    if (has_brk_tgtpress()) {
      total_size += 1 + 8;
    }

    // optional double Brk_TgtAccSpd = 5;
    if (has_brk_tgtaccspd()) {
      total_size += 1 + 8;
    }

    // optional int32 Prk_Active = 6;
    if (has_prk_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prk_active());
    }

    // optional bool Prk_Enable = 7;
    if (has_prk_enable()) {
      total_size += 1 + 1;
    }

    // optional int32 Str_Active = 8;
    if (has_str_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str_active());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 Str_CtrlMode = 9;
    if (has_str_ctrlmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->str_ctrlmode());
    }

    // optional double Str_TgtAngle = 10;
    if (has_str_tgtangle()) {
      total_size += 1 + 8;
    }

    // optional double Str_TgtCurvature = 11;
    if (has_str_tgtcurvature()) {
      total_size += 1 + 8;
    }

    // optional double Str_TgtAngleSpd = 12;
    if (has_str_tgtanglespd()) {
      total_size += 1 + 8;
    }

    // optional int32 Drv_Active = 13;
    if (has_drv_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drv_active());
    }

    // optional int32 Drv_CtrlMode = 14;
    if (has_drv_ctrlmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drv_ctrlmode());
    }

    // optional int32 Drv_TgtGear = 15;
    if (has_drv_tgtgear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drv_tgtgear());
    }

    // optional double Drv_TgtPedpos = 16;
    if (has_drv_tgtpedpos()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional double Drv_TgtVehSpd0 = 17;
    if (has_drv_tgtvehspd0()) {
      total_size += 2 + 8;
    }

    // optional double Drv_TgtVehAccSpd = 18;
    if (has_drv_tgtvehaccspd()) {
      total_size += 2 + 8;
    }

    // optional double Drv_VehSpdLimit = 19;
    if (has_drv_vehspdlimit()) {
      total_size += 2 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Decision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Decision* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Decision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Decision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Decision)
    MergeFrom(*source);
  }
}

void Decision::MergeFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Decision)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brk_active()) {
      set_brk_active(from.brk_active());
    }
    if (from.has_brk_ctrlmode()) {
      set_brk_ctrlmode(from.brk_ctrlmode());
    }
    if (from.has_brk_tgtpedpos()) {
      set_brk_tgtpedpos(from.brk_tgtpedpos());
    }
    if (from.has_brk_tgtpress()) {
      set_brk_tgtpress(from.brk_tgtpress());
    }
    if (from.has_brk_tgtaccspd()) {
      set_brk_tgtaccspd(from.brk_tgtaccspd());
    }
    if (from.has_prk_active()) {
      set_prk_active(from.prk_active());
    }
    if (from.has_prk_enable()) {
      set_prk_enable(from.prk_enable());
    }
    if (from.has_str_active()) {
      set_str_active(from.str_active());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_str_ctrlmode()) {
      set_str_ctrlmode(from.str_ctrlmode());
    }
    if (from.has_str_tgtangle()) {
      set_str_tgtangle(from.str_tgtangle());
    }
    if (from.has_str_tgtcurvature()) {
      set_str_tgtcurvature(from.str_tgtcurvature());
    }
    if (from.has_str_tgtanglespd()) {
      set_str_tgtanglespd(from.str_tgtanglespd());
    }
    if (from.has_drv_active()) {
      set_drv_active(from.drv_active());
    }
    if (from.has_drv_ctrlmode()) {
      set_drv_ctrlmode(from.drv_ctrlmode());
    }
    if (from.has_drv_tgtgear()) {
      set_drv_tgtgear(from.drv_tgtgear());
    }
    if (from.has_drv_tgtpedpos()) {
      set_drv_tgtpedpos(from.drv_tgtpedpos());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_drv_tgtvehspd0()) {
      set_drv_tgtvehspd0(from.drv_tgtvehspd0());
    }
    if (from.has_drv_tgtvehaccspd()) {
      set_drv_tgtvehaccspd(from.drv_tgtvehaccspd());
    }
    if (from.has_drv_vehspdlimit()) {
      set_drv_vehspdlimit(from.drv_vehspdlimit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Decision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decision::CopyFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decision::IsInitialized() const {

  return true;
}

void Decision::Swap(Decision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Decision::InternalSwap(Decision* other) {
  std::swap(brk_active_, other->brk_active_);
  std::swap(brk_ctrlmode_, other->brk_ctrlmode_);
  std::swap(brk_tgtpedpos_, other->brk_tgtpedpos_);
  std::swap(brk_tgtpress_, other->brk_tgtpress_);
  std::swap(brk_tgtaccspd_, other->brk_tgtaccspd_);
  std::swap(prk_active_, other->prk_active_);
  std::swap(prk_enable_, other->prk_enable_);
  std::swap(str_active_, other->str_active_);
  std::swap(str_ctrlmode_, other->str_ctrlmode_);
  std::swap(str_tgtangle_, other->str_tgtangle_);
  std::swap(str_tgtcurvature_, other->str_tgtcurvature_);
  std::swap(str_tgtanglespd_, other->str_tgtanglespd_);
  std::swap(drv_active_, other->drv_active_);
  std::swap(drv_ctrlmode_, other->drv_ctrlmode_);
  std::swap(drv_tgtgear_, other->drv_tgtgear_);
  std::swap(drv_tgtpedpos_, other->drv_tgtpedpos_);
  std::swap(drv_tgtvehspd0_, other->drv_tgtvehspd0_);
  std::swap(drv_tgtvehaccspd_, other->drv_tgtvehaccspd_);
  std::swap(drv_vehspdlimit_, other->drv_vehspdlimit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Decision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Decision_descriptor_;
  metadata.reflection = Decision_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Decision

// optional int32 Brk_Active = 1;
bool Decision::has_brk_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Decision::set_has_brk_active() {
  _has_bits_[0] |= 0x00000001u;
}
void Decision::clear_has_brk_active() {
  _has_bits_[0] &= ~0x00000001u;
}
void Decision::clear_brk_active() {
  brk_active_ = 0;
  clear_has_brk_active();
}
 ::google::protobuf::int32 Decision::brk_active() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_Active)
  return brk_active_;
}
 void Decision::set_brk_active(::google::protobuf::int32 value) {
  set_has_brk_active();
  brk_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_Active)
}

// optional int32 Brk_CtrlMode = 2;
bool Decision::has_brk_ctrlmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Decision::set_has_brk_ctrlmode() {
  _has_bits_[0] |= 0x00000002u;
}
void Decision::clear_has_brk_ctrlmode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Decision::clear_brk_ctrlmode() {
  brk_ctrlmode_ = 0;
  clear_has_brk_ctrlmode();
}
 ::google::protobuf::int32 Decision::brk_ctrlmode() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_CtrlMode)
  return brk_ctrlmode_;
}
 void Decision::set_brk_ctrlmode(::google::protobuf::int32 value) {
  set_has_brk_ctrlmode();
  brk_ctrlmode_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_CtrlMode)
}

// optional double Brk_TgtPedpos = 3;
bool Decision::has_brk_tgtpedpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Decision::set_has_brk_tgtpedpos() {
  _has_bits_[0] |= 0x00000004u;
}
void Decision::clear_has_brk_tgtpedpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void Decision::clear_brk_tgtpedpos() {
  brk_tgtpedpos_ = 0;
  clear_has_brk_tgtpedpos();
}
 double Decision::brk_tgtpedpos() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_TgtPedpos)
  return brk_tgtpedpos_;
}
 void Decision::set_brk_tgtpedpos(double value) {
  set_has_brk_tgtpedpos();
  brk_tgtpedpos_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_TgtPedpos)
}

// optional double Brk_TgtPress = 4;
bool Decision::has_brk_tgtpress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Decision::set_has_brk_tgtpress() {
  _has_bits_[0] |= 0x00000008u;
}
void Decision::clear_has_brk_tgtpress() {
  _has_bits_[0] &= ~0x00000008u;
}
void Decision::clear_brk_tgtpress() {
  brk_tgtpress_ = 0;
  clear_has_brk_tgtpress();
}
 double Decision::brk_tgtpress() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_TgtPress)
  return brk_tgtpress_;
}
 void Decision::set_brk_tgtpress(double value) {
  set_has_brk_tgtpress();
  brk_tgtpress_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_TgtPress)
}

// optional double Brk_TgtAccSpd = 5;
bool Decision::has_brk_tgtaccspd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Decision::set_has_brk_tgtaccspd() {
  _has_bits_[0] |= 0x00000010u;
}
void Decision::clear_has_brk_tgtaccspd() {
  _has_bits_[0] &= ~0x00000010u;
}
void Decision::clear_brk_tgtaccspd() {
  brk_tgtaccspd_ = 0;
  clear_has_brk_tgtaccspd();
}
 double Decision::brk_tgtaccspd() const {
  // @@protoc_insertion_point(field_get:Decision.Brk_TgtAccSpd)
  return brk_tgtaccspd_;
}
 void Decision::set_brk_tgtaccspd(double value) {
  set_has_brk_tgtaccspd();
  brk_tgtaccspd_ = value;
  // @@protoc_insertion_point(field_set:Decision.Brk_TgtAccSpd)
}

// optional int32 Prk_Active = 6;
bool Decision::has_prk_active() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Decision::set_has_prk_active() {
  _has_bits_[0] |= 0x00000020u;
}
void Decision::clear_has_prk_active() {
  _has_bits_[0] &= ~0x00000020u;
}
void Decision::clear_prk_active() {
  prk_active_ = 0;
  clear_has_prk_active();
}
 ::google::protobuf::int32 Decision::prk_active() const {
  // @@protoc_insertion_point(field_get:Decision.Prk_Active)
  return prk_active_;
}
 void Decision::set_prk_active(::google::protobuf::int32 value) {
  set_has_prk_active();
  prk_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Prk_Active)
}

// optional bool Prk_Enable = 7;
bool Decision::has_prk_enable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Decision::set_has_prk_enable() {
  _has_bits_[0] |= 0x00000040u;
}
void Decision::clear_has_prk_enable() {
  _has_bits_[0] &= ~0x00000040u;
}
void Decision::clear_prk_enable() {
  prk_enable_ = false;
  clear_has_prk_enable();
}
 bool Decision::prk_enable() const {
  // @@protoc_insertion_point(field_get:Decision.Prk_Enable)
  return prk_enable_;
}
 void Decision::set_prk_enable(bool value) {
  set_has_prk_enable();
  prk_enable_ = value;
  // @@protoc_insertion_point(field_set:Decision.Prk_Enable)
}

// optional int32 Str_Active = 8;
bool Decision::has_str_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Decision::set_has_str_active() {
  _has_bits_[0] |= 0x00000080u;
}
void Decision::clear_has_str_active() {
  _has_bits_[0] &= ~0x00000080u;
}
void Decision::clear_str_active() {
  str_active_ = 0;
  clear_has_str_active();
}
 ::google::protobuf::int32 Decision::str_active() const {
  // @@protoc_insertion_point(field_get:Decision.Str_Active)
  return str_active_;
}
 void Decision::set_str_active(::google::protobuf::int32 value) {
  set_has_str_active();
  str_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_Active)
}

// optional int32 Str_CtrlMode = 9;
bool Decision::has_str_ctrlmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Decision::set_has_str_ctrlmode() {
  _has_bits_[0] |= 0x00000100u;
}
void Decision::clear_has_str_ctrlmode() {
  _has_bits_[0] &= ~0x00000100u;
}
void Decision::clear_str_ctrlmode() {
  str_ctrlmode_ = 0;
  clear_has_str_ctrlmode();
}
 ::google::protobuf::int32 Decision::str_ctrlmode() const {
  // @@protoc_insertion_point(field_get:Decision.Str_CtrlMode)
  return str_ctrlmode_;
}
 void Decision::set_str_ctrlmode(::google::protobuf::int32 value) {
  set_has_str_ctrlmode();
  str_ctrlmode_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_CtrlMode)
}

// optional double Str_TgtAngle = 10;
bool Decision::has_str_tgtangle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Decision::set_has_str_tgtangle() {
  _has_bits_[0] |= 0x00000200u;
}
void Decision::clear_has_str_tgtangle() {
  _has_bits_[0] &= ~0x00000200u;
}
void Decision::clear_str_tgtangle() {
  str_tgtangle_ = 0;
  clear_has_str_tgtangle();
}
 double Decision::str_tgtangle() const {
  // @@protoc_insertion_point(field_get:Decision.Str_TgtAngle)
  return str_tgtangle_;
}
 void Decision::set_str_tgtangle(double value) {
  set_has_str_tgtangle();
  str_tgtangle_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_TgtAngle)
}

// optional double Str_TgtCurvature = 11;
bool Decision::has_str_tgtcurvature() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Decision::set_has_str_tgtcurvature() {
  _has_bits_[0] |= 0x00000400u;
}
void Decision::clear_has_str_tgtcurvature() {
  _has_bits_[0] &= ~0x00000400u;
}
void Decision::clear_str_tgtcurvature() {
  str_tgtcurvature_ = 0;
  clear_has_str_tgtcurvature();
}
 double Decision::str_tgtcurvature() const {
  // @@protoc_insertion_point(field_get:Decision.Str_TgtCurvature)
  return str_tgtcurvature_;
}
 void Decision::set_str_tgtcurvature(double value) {
  set_has_str_tgtcurvature();
  str_tgtcurvature_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_TgtCurvature)
}

// optional double Str_TgtAngleSpd = 12;
bool Decision::has_str_tgtanglespd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Decision::set_has_str_tgtanglespd() {
  _has_bits_[0] |= 0x00000800u;
}
void Decision::clear_has_str_tgtanglespd() {
  _has_bits_[0] &= ~0x00000800u;
}
void Decision::clear_str_tgtanglespd() {
  str_tgtanglespd_ = 0;
  clear_has_str_tgtanglespd();
}
 double Decision::str_tgtanglespd() const {
  // @@protoc_insertion_point(field_get:Decision.Str_TgtAngleSpd)
  return str_tgtanglespd_;
}
 void Decision::set_str_tgtanglespd(double value) {
  set_has_str_tgtanglespd();
  str_tgtanglespd_ = value;
  // @@protoc_insertion_point(field_set:Decision.Str_TgtAngleSpd)
}

// optional int32 Drv_Active = 13;
bool Decision::has_drv_active() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Decision::set_has_drv_active() {
  _has_bits_[0] |= 0x00001000u;
}
void Decision::clear_has_drv_active() {
  _has_bits_[0] &= ~0x00001000u;
}
void Decision::clear_drv_active() {
  drv_active_ = 0;
  clear_has_drv_active();
}
 ::google::protobuf::int32 Decision::drv_active() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_Active)
  return drv_active_;
}
 void Decision::set_drv_active(::google::protobuf::int32 value) {
  set_has_drv_active();
  drv_active_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_Active)
}

// optional int32 Drv_CtrlMode = 14;
bool Decision::has_drv_ctrlmode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Decision::set_has_drv_ctrlmode() {
  _has_bits_[0] |= 0x00002000u;
}
void Decision::clear_has_drv_ctrlmode() {
  _has_bits_[0] &= ~0x00002000u;
}
void Decision::clear_drv_ctrlmode() {
  drv_ctrlmode_ = 0;
  clear_has_drv_ctrlmode();
}
 ::google::protobuf::int32 Decision::drv_ctrlmode() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_CtrlMode)
  return drv_ctrlmode_;
}
 void Decision::set_drv_ctrlmode(::google::protobuf::int32 value) {
  set_has_drv_ctrlmode();
  drv_ctrlmode_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_CtrlMode)
}

// optional int32 Drv_TgtGear = 15;
bool Decision::has_drv_tgtgear() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Decision::set_has_drv_tgtgear() {
  _has_bits_[0] |= 0x00004000u;
}
void Decision::clear_has_drv_tgtgear() {
  _has_bits_[0] &= ~0x00004000u;
}
void Decision::clear_drv_tgtgear() {
  drv_tgtgear_ = 0;
  clear_has_drv_tgtgear();
}
 ::google::protobuf::int32 Decision::drv_tgtgear() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtGear)
  return drv_tgtgear_;
}
 void Decision::set_drv_tgtgear(::google::protobuf::int32 value) {
  set_has_drv_tgtgear();
  drv_tgtgear_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtGear)
}

// optional double Drv_TgtPedpos = 16;
bool Decision::has_drv_tgtpedpos() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Decision::set_has_drv_tgtpedpos() {
  _has_bits_[0] |= 0x00008000u;
}
void Decision::clear_has_drv_tgtpedpos() {
  _has_bits_[0] &= ~0x00008000u;
}
void Decision::clear_drv_tgtpedpos() {
  drv_tgtpedpos_ = 0;
  clear_has_drv_tgtpedpos();
}
 double Decision::drv_tgtpedpos() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtPedpos)
  return drv_tgtpedpos_;
}
 void Decision::set_drv_tgtpedpos(double value) {
  set_has_drv_tgtpedpos();
  drv_tgtpedpos_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtPedpos)
}

// optional double Drv_TgtVehSpd0 = 17;
bool Decision::has_drv_tgtvehspd0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Decision::set_has_drv_tgtvehspd0() {
  _has_bits_[0] |= 0x00010000u;
}
void Decision::clear_has_drv_tgtvehspd0() {
  _has_bits_[0] &= ~0x00010000u;
}
void Decision::clear_drv_tgtvehspd0() {
  drv_tgtvehspd0_ = 0;
  clear_has_drv_tgtvehspd0();
}
 double Decision::drv_tgtvehspd0() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtVehSpd0)
  return drv_tgtvehspd0_;
}
 void Decision::set_drv_tgtvehspd0(double value) {
  set_has_drv_tgtvehspd0();
  drv_tgtvehspd0_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtVehSpd0)
}

// optional double Drv_TgtVehAccSpd = 18;
bool Decision::has_drv_tgtvehaccspd() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Decision::set_has_drv_tgtvehaccspd() {
  _has_bits_[0] |= 0x00020000u;
}
void Decision::clear_has_drv_tgtvehaccspd() {
  _has_bits_[0] &= ~0x00020000u;
}
void Decision::clear_drv_tgtvehaccspd() {
  drv_tgtvehaccspd_ = 0;
  clear_has_drv_tgtvehaccspd();
}
 double Decision::drv_tgtvehaccspd() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_TgtVehAccSpd)
  return drv_tgtvehaccspd_;
}
 void Decision::set_drv_tgtvehaccspd(double value) {
  set_has_drv_tgtvehaccspd();
  drv_tgtvehaccspd_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_TgtVehAccSpd)
}

// optional double Drv_VehSpdLimit = 19;
bool Decision::has_drv_vehspdlimit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Decision::set_has_drv_vehspdlimit() {
  _has_bits_[0] |= 0x00040000u;
}
void Decision::clear_has_drv_vehspdlimit() {
  _has_bits_[0] &= ~0x00040000u;
}
void Decision::clear_drv_vehspdlimit() {
  drv_vehspdlimit_ = 0;
  clear_has_drv_vehspdlimit();
}
 double Decision::drv_vehspdlimit() const {
  // @@protoc_insertion_point(field_get:Decision.Drv_VehSpdLimit)
  return drv_vehspdlimit_;
}
 void Decision::set_drv_vehspdlimit(double value) {
  set_has_drv_vehspdlimit();
  drv_vehspdlimit_ = value;
  // @@protoc_insertion_point(field_set:Decision.Drv_VehSpdLimit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
